syntax = "proto3";

package actoredge;

// Main service for distributed actor calls
service DistributedActor {
  // Unary RPC for regular method calls
  rpc RemoteCall(RemoteCallRequest) returns (RemoteCallResponse);
  
  // Bidirectional streaming for async sequences
  rpc StreamCall(stream RemoteStreamPacket) returns (stream RemoteStreamPacket);
}

// Request for a remote method call
message RemoteCallRequest {
  // Unique identifier for this call
  string call_id = 1;
  
  // The target actor's ID (96-bit UUID as base64url)
  string actor_id = 2;
  
  // The method identifier (mangled function signature)
  string method = 3;
  
  // Serialized arguments using InvocationEncoder
  bytes payload = 4;
  
  // Optional metadata for tracing/context
  map<string, string> metadata = 5;
}

// Response from a remote method call
message RemoteCallResponse {
  // Corresponding request call_id
  string call_id = 1;
  
  oneof result {
    // Successful return value
    bytes value = 2;
    
    // Error occurred during execution
    ErrorEnvelope error = 3;
  }
}

// Packet for streaming calls
message RemoteStreamPacket {
  // Stream ID to multiplex multiple streams
  string stream_id = 1;
  
  oneof payload {
    // Stream value
    bytes value = 2;
    
    // Stream error
    ErrorEnvelope error = 3;
    
    // Stream completion signal
    bool done = 4;
  }
}

// Error envelope for transmitting errors
message ErrorEnvelope {
  // Swift type name of the error
  string type_url = 1;
  
  // Serialized error data
  bytes data = 2;
  
  // Human-readable error description
  string description = 3;
}

// Metadata for distributed tracing
message TraceContext {
  // W3C Trace Context
  string traceparent = 1;
  string tracestate = 2;
  
  // Additional baggage
  map<string, string> baggage = 3;
}